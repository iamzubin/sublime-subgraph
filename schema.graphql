# Pool status
enum LoanStatus {
  COLLECTION
  ACTIVE
  CLOSED
  CANCELLED
  DEFAULTED
  TERMINATED
}

# Pool operations
enum PoolOperations {
  NOT_CREATED
  COLLECTION
  ACTIVE
  REPAY
  DEPOSIT_COLLATERAL
  BORROW
  WITHDRAW_COLLATERAL
  EXTENSION_REQUESTED
  MARGIN_CALLED
  CLOSED
  CANCELLED
  DEFAULTED
  TERMINATED
}

# Address linking status
enum AddressLinkStatus {
  # REQUESTED
  # CANCELLED
  LINKED
  MASTER
}

# storing User details
type UserProfile @entity {
  id: ID!
  masterAddress: String!
  verifiedBy: [String!]
  userMetadataPerVerifier: [UserMetadataPerVerifier!]! @derivedFrom(field: "userID")
  walletAddresses: [walletAddress!]! @derivedFrom(field: "user")
  # poolsCreated: [Pools!]! @derivedFrom(field: "borrower")
}

# mapping the verifier with the pools he verified
type verifier @entity {
  id: ID!
  usersVerified: [UserMetadataPerVerifier!]! @derivedFrom(field: "verifiedBy")
}

type UserMetadataPerVerifier @entity {
  id: ID! # verifier + userID from profile
  verifier: String!
  metadata: String
  userID: UserProfile!
  verifiedBy: verifier!
}

# mapping one user to one or more wallet addresses
type walletAddress @entity {
  id: ID!
  user: UserProfile!
  linkStatus: AddressLinkStatus
  # activationDelay: BigInt
}

## Dashboard information



# # pool details along with events to fill the timeline
# type Pools @entity {
#   id: ID!
#   borrower: UserProfile!
#   nextPayment: BigInt! # next repayment deadline

#   # Pool timeline events
#   poolTimeLine: [PoolTimeLine!]! @derivedFrom(field: "pool")

#   # Pool Constants
#   borrowAmountRequested: BigInt!
#   loanStartTime: BigInt!
#   loanWithdrawalDeadline: BigInt!
#   borrowAsset: String!
#   idealCollateralRatio: BigInt!
#   borrowRate: BigInt!
#   noOfRepaymentIntervals: BigInt!
#   repaymentInterval: BigInt!
#   collateralAsset: String!
#   poolSavingsStrategy: String!
#   lenderVerifier: String!

#   # Pool Variables
#   baseLiquidityShares: BigInt!
#   extraLiquidityShares: BigInt!
#   loanStatus: LoanStatus!
#   penaltyLiquidityAmount: BigInt!

#   # Repayment Variables to keep track of repayment status
#   repaidAmount: BigInt!
#   isLoanExtensionActive: Boolean!
#   loanDurationCovered: BigInt!
#   loanExtensionPeriod: BigInt!

#   # Repayment Constants
#   numberOfTotalRepayments: BigInt!
#   gracePenaltyRate: BigInt!
#   gracePeriodFraction: BigInt!
#   loanDuration: BigInt!
#   repaymentInterval: BigInt!
#   borrowRate: BigInt!
#   loanStartTime: BigInt!
#   repayAsset: String!

#   # Extension Variables to keep track of extension requests
#   hasExtensionPassed: Boolean!
#   totalExtensionSupport: BigInt!
#   extensionVoteEndTime: BigInt!
#   repaymentInterval: BigInt!
#   lastVotedExtension: BigInt! # how to associate lender with it?

#   lenders: [Lenders!]! @derivedFrom(field: "LenderAddress")  
# }

# type PoolTimeLine @entity {
#   id: ID!
#   pool: Pools!
#   timestamp: BigInt
#   poolOperation: PoolOperations
#   amount: BigInt
# }

# type Lenders @entity {
#   id: ID!
#   pool: [Pools!]! 
#   LenderAddress: String!
#   interestWithdrawn: BigInt!
#   marginCallEndTime: BigInt!
#   extraLiquidityShares: BigInt!
# }

type CreditLine @entity {
  #creditLine number
  id: ID!
  # credit line time line
  creditLineTimeline: [CreditLineTimeline!]! @derivedFrom(field: "creditLine")

  # Credit Line Constants
  lender: String
  borrower: String
  borrowLimit: BigInt
  idealCollateralRatio: BigInt
  borrowRate: BigInt
  borrowAsset: String
  collateralAsset: String
  autoLiquidation: Boolean
  requestByLender: Boolean

  # credit line variables
  status: CreditLineStatus
  principal: BigInt
  totalInterestRepaid: BigInt
  lastPrincipalUpdateTime: BigInt
  interestAccruedTillLastPrincipalUpdate: BigInt
}

type CreditLineGlobalParam @entity {
  # use always 1, to store the global params
  id: ID!
  # strategy registry
  strategyRegistry: String
  # savings account
  savingsAccount: String
  # protocol fee fraction
  protocolFeeFraction: BigInt
  # protocol fee collector
  protocolFeeCollector: String
  # price oracle
  priceOracle: String
  # liquidation reward fraction
  liquidationRewardFraction: BigInt
  # default strategy
  defaultStrategy: String
}

type CreditLineTimeline @entity {
  id: ID!
  creditLine: CreditLine!
  timestamp: BigInt
  creditLineOperation: CreditLineOperations
  amount: BigInt
  strategy: String
  liquidator: String
}

enum CreditLineStatus {
  NOT_CREATED
  REQUESTED
  ACTIVE
  CLOSED
  CANCELLED
  LIQUIDATED
}

enum CreditLineOperations {
  NOT_CREATED
  REQUESTED
  ACTIVE
  DEPOSIT_COLLATERAL
  BORROW
  REPAY
  WITHDRAW_COLLATERAL
  CLOSED
  CANCELLED
  RESET
  LIQUIDATED
}

type StrategyRegistry @entity {
  id: ID!
  max: BigInt!
  strategyOrder: [Strategy!]
}

type Strategy @entity {
  id: ID!
  address: String!
  enabled: Boolean!
}

type UserBalance @entity {
  id: ID!
  strategyBalance: [Balance!]!
  user: String!
  token: String!
}

type Balance @entity {
  id: ID!
  user: String!
  strategy: Strategy!
  token: String!
  shares: BigInt!
}

type Allowance @entity {
  id: ID!
  from: String!
  to: String!
  token: String!
  amount: BigInt!
}
